import java.awt.Rectangle;
import javax.swing.JComponent;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Ellipse2D.Double;
import java.awt.geom.Ellipse2D;
import javax.swing.JComponent;
import javax.swing.JFrame;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import java.io.IOException;
import javax.swing.Timer;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Random;

public class Rocket extends JComponent implements ActionListener
{
    private BufferedImage rocket;// construct instance field variables.
    private int posX;
    private int posY;
    private Timer t;
    public Rocket(int x, int y)// constructor for rocket class. takes in two parameter variables of type int. 
    {
        posX = x;// initialize instance field variables. 
        posY = y;
        t=new Timer(10,this);// initialize timer, with delay of 10 milisecond. Events generated by the timer will serve as the pace for the rockets motion. 
        t.start();// invoke start method on timer to start the periodic generation of events. 

        try {// allows you to test a block of code and then check for errors(as image imports usually throw and error)
            rocket = ImageIO.read(new File("Unknown-3.png"));// accesses image stored within the local folder
        } catch (IOException e) {// allows you to catch a specific error without compile type errors. In the case of image imports 'IOException e'
        }
    }

    public void actionPerformed(ActionEvent e){// ActionPerformed method from the ActionListener interface.
        posY-=5;//reduced y value of the rocket to make it move up. 
        repaint();// repaint mutated rocket.
        if(posY<-100)t.stop();// if rocket y value reduce past -100, that specific rocket's timer is stopped. 
        this.alienGoBoom();// this method defined below, checks to see the rockets proximity to an alien, and if it gets too close, to remove the alien and the rocket. 
    }

    public boolean alienGoBoom()
    {
        boolean hit = false;// boolean to trak hit on alien. 
        for(int i = 0; i< AlienManager.army.size() ; i++)// for loop to check every element of the alien ArrayList.
        {
            if (this.getXPos()-AlienManager.army.get(i).getXPos()<=5 && this.getXPos()-AlienManager.army.get(i).getXPos()>=-5 && this.getYPos()-AlienManager.army.get(i).getYPos()<=5 && this.getYPos()-AlienManager.army.get(i).getYPos()>0) // Boolean opperator to check proximity of rocket 5 units horizontally and vertically in relation to current alien. 
            {
                //i=i-1;
                hit = true;// if opperator returns true, then hit is set to true indicating a hit. 
                Board.p+=Board.ad;

                Board.score.setText(""+Board.p);

                if (hit) //if hit is true...
                {
                    Board.all.remove(this);//remove rocket object from static frame
                    Board.all.remove(AlienManager.army.get(i));// remove current alien from static frame
                    AlienManager.army.remove(i);// remove current alien from alien ArrayList
                    t.stop();// Stop this rocket's timer. 
                }
            }
        }
        
        for(int i = 0; i< BlockManager.barrier.size() ; i++)// Same comment code as above for loop except performed in relation to the blocks not the aliens
        {
            if (this.getXPos()-BlockManager.barrier.get(i).getXPos()>=-4 && this.getXPos()-BlockManager.barrier.get(i).getXPos()<=0 && this.getYPos()-BlockManager.barrier.get(i).getYPos()>=-4 && this.getYPos()-BlockManager.barrier.get(i).getYPos()<=0) 
            {
                //i=i-1;
                hit = true;
                if (hit) 
                {
                    Board.all.remove(this);
                    Board.all.remove(BlockManager.barrier.get(i));
                    BlockManager.barrier.remove(i);
                    t.stop();
                }
            }
        }
        return hit;// returns the hit. 
    }

    public void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;// construct new instance of graphical component
        g2.drawImage(rocket, posX, posY, null);// initialized pixel png file of rocket drawn to fram using drawImage method invoked on graphical component. 
    }

    public int getXPos()// acsessor method to retrieve private instance field variables. 
    {
        return posX;
    }

    public int getYPos()// acsessor method to retrieve private instance field variables. 
    {
        return posY;
    }

    public void setX(int k)// acsessor method to retrieve private instance field variables. 
    {
        posX = k;
    }
}
